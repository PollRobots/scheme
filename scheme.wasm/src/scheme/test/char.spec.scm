(if (not (procedure? assert))
  (include "test/test.scm"))

(run-tests "characters"
  (test-case "character names" (lambda ()
    (assert-equal (char->integer #\alarm) #x0007 "(char->integer #\\alarm)")
    (assert-equal (char->integer #\backspace) #x0008 "(char->integer #\\backspace)")
    (assert-equal (char->integer #\delete) #x007F "(char->integer #\\delete)")
    (assert-equal (char->integer #\escape) #x001B "(char->integer #\\escape)")
    (assert-equal (char->integer #\newline) #x000A "(char->integer #\\newline)")
    (assert-equal (char->integer #\null) #x0000 "(char->integer #\\null)")
    (assert-equal (char->integer #\return) #x000D "(char->integer #\\return)")
    (assert-equal (char->integer #\space) #x0020 "(char->integer #\\space)")
    (assert-equal (char->integer #\tab) #x0009 "(char->integer #\\tab)")))

  (test-case "basic characters" (lambda ()
    (assert-equal (char->integer #\A) #x0041 "(char->integer #\\A)")
    (assert-equal (char->integer #\a) #x0061 "(char->integer #\\a)")
    (assert-equal (char->integer #\() #x0028 "(char->integer #\\()")
    (assert-equal (char->integer #\)) #x0029 "(char->integer #\\))")
    (assert-equal (char->integer #\ ) #x0020 "(char->integer #\\ )")
    (assert-equal (char->integer #\x3BB) #x03BB "(char->integer #\\x3BB)")))

  (test-case "(char? <obj>)" (lambda ()
    (assert (char? #\a) "(char? #\\a)")
    (assert (char? #\A) "(char? #\\A)")
    (assert (char? #\() "(char? #\\()")
    (assert (char? #\)) "(char? #\\))")
    (assert (char? #\x03BB) "(char? #\\x03BB)")
    (assert-not (char? "\x3BB;") "(char? \"\x3BB;\")")
    (assert-not (char? #t) "(char? #t)")))

  (test-case "(char=? <char_1> <char_2> ...)" (lambda ()
    (assert (char=? #\a #\a) "(char=? #\\a #\\a)")
    (assert (char=? #\a #\a #\a) "(char=? #\\a #\\a #\\a)")
    (assert (char=? #\x61 #\a #\a) "(char=? #\\x61 #\\a #\\a)")
    (assert (char=? #\x3b4 #\δ)  "(char=? #\\x3b1 #\\δ)")
    (assert-not (char=? #\Δ #\δ)  "(char=? #\\Δ #\\δ)")
    (assert-not (char=? #\a #\b #\a) "(char=? #\\a #\\b #\\a)")))

  (test-case "(char-ci=? <char_1> <char_2> ...)" (lambda ()
    (assert (char-ci=? #\A #\a) "(char-ci=? #\\A #\\a)")
    (assert (char-ci=? #\a #\A #\a) "(char-ci=? #\\a #\\A #\\a)")
    (assert (char-ci=? #\x3b4 #\δ)  "(char=? #\\x3b1 #\\δ)")
    (assert (char-ci=? #\Δ #\δ)  "(char=? #\\Δ #\\δ)")
    (assert (char-ci=? #\x61 #\x41 #\a) "(char-ci=? #\\x61 #\\x41 #\\a)")))

  (test-case "(char<? <char_1> <char_2> ...)" (lambda ()
    (assert (char<? #\a #\b #\c) "(char<? #\\a #\\b #\\c)")
    (assert-not (char<? #\a #\b #\b #\c) "(char<? #\\a #\\b #\\b #\\c)")))

  (test-case "(char-ci<? <char_1> <char_2> ...)" (lambda ()
    (assert (char-ci<? #\a #\b #\c) "(char-ci<? #\\a #\\b #\\c)")
    (assert-not (char-ci<? #\a #\B #\b #\c) "(char-ci<? #\\a #\\B #\\b #\\c)")
    (assert (char-ci<? #\a #\B #\c) "(char-ci<? #\\a #\\B #\\c)")))

  (test-case "(char<=? <char_1> <char_2> ...)" (lambda ()
    (assert (char<=? #\a #\b #\c) "(char<=? #\\a #\\b #\\c)")
    (assert (char<=? #\a #\b #\b #\c) "(char<=? #\\a #\\b #\\b #\\c)")
    (assert-not (char<=? #\c #\b #\c) "(char<=? #\\c #\\b #\\c)")))

  (test-case "(char-ci<=? <char_1> <char_2> ...)" (lambda ()
    (assert (char-ci<=? #\a #\b #\c) "(char-ci<=? #\\a #\\b #\\c)")
    (assert (char-ci<=? #\a #\B #\b #\c) "(char-ci<=? #\\a #\\B #\\b #\\c)")
    (assert (char-ci<=? #\a #\B #\c) "(char-ci<=? #\\a #\\B #\\c)")))

  (test-case "(char>? <char_1> <char_2> ...)" (lambda ()
    (assert (char>? #\c #\b #\a) "(char>? #\\c #\\b #\\a)")
    (assert-not (char>? #\c #\b #\b #\a) "(char>? #\\c #\\b #\\b #\\a)")))

  (test-case "(char-ci>? <char_1> <char_2> ...)" (lambda ()
    (assert (char-ci>? #\c #\b #\a) "(char-ci>? #\\c #\\b #\\a)")
    (assert-not (char-ci>? #\c #\B #\b #\a) "(char-ci>? #\\c #\\B #\\b #\\a)")
    (assert (char-ci>? #\c #\B #\a) "(char-ci>? #\\c #\\B #\\a)")))

  (test-case "(char>=? <char_1> ><char_2> ...)" (lambda ()
    (assert (char>=? #\c #\b #\a) "(char>=? #\\c #\\b #\\a)")
    (assert (char>=? #\c #\b #\b #\a) "(char>=? #\\c #\\b #\\b #\\a)")
    (assert-not (char>=? #\c #\b #\c) "(char>=? #\\c #\\b #\\c)")))

  (test-case "(char-ci>=? <char_1> <char_2> ...)" (lambda ()
    (assert (char-ci>=? #\c #\b #\a) "(char-ci>=? #\\c #\\b #\\a)")
    (assert (char-ci>=? #\c #\B #\b #\a) "(char-ci>=? #\\c #\\B #\\b #\\a)")
    (assert (char-ci>=? #\c #\B #\a) "(char-ci>=? #\\c #\\B #\\a)")))

  (test-case "(char-alphabetic? <char>)" (lambda ()
    (assert (char-alphabetic? #\a) "(char-alphabetic? #\\a)")
    (assert (char-alphabetic? #\Δ) "(char-alphabetic? #\\Δ)")
    (assert-not (char-alphabetic? #\,) "(char-alphabetic? #\\,)")
    (assert-not (char-alphabetic? #\1) "(char-alphabetic? #\\1)")
    (assert-not (char-alphabetic? #\€) "(char-alphabetic? #\\€)")
    (assert-not (char-alphabetic? #\space) "(char-alphabetic? #\\space)")))

  (test-case "(char-numeric? <char>)" (lambda ()
    (assert (char-numeric? #\1) "(char-numeric? #\\1)")
    (assert (char-numeric? #\x664) "(char-numeric? #\\x664)")
    (assert (char-numeric? #\xAE6) "(char-numeric? #\\xAE6)")
    (assert-not (char-numeric? #\a) "(char-numeric? #\\a)")
    (assert-not (char-numeric? #\space) "(char-numeric? #\\space)")))

  (test-case "(char-whitespace? <char>)" (lambda ()
    (assert (char-whitespace? #\space) "(char-whitespace? #\\space)")
    (assert (char-whitespace? #\tab) "(char-whitespace? #\\tab)")
    (assert-not (char-whitespace? #\1) "(char-whitespace? #\\1)")
    (assert-not (char-whitespace? #\a) "(char-whitespace? #\\a)")))

  (test-case "(char-upper-case? <char>)" (lambda ()
    (assert (char-upper-case? #\A) "(char-upper-case? #\\A)")
    (assert (char-upper-case? #\Δ) "(char-upper-case? #\\Δ)")
    (assert-not (char-upper-case? #\a) "(char-upper-case? #\\a)")
    (assert-not (char-upper-case? #\δ) "(char-upper-case? #\\δ)")
    (assert-not (char-upper-case? #\1) "(char-upper-case? #\\1")))

  (test-case "(char-lower-case? <char>)" (lambda ()
    (assert (char-lower-case? #\a) "(char-lower-case? #\\a)")
    (assert (char-lower-case? #\δ) "(char-lower-case? #\\δ)")
    (assert-not (char-lower-case? #\A) "(char-lower-case? #\\A)")
    (assert-not (char-lower-case? #\Δ) "(char-lower-case? #\\Δ)")
    (assert-not (char-lower-case? #\1) "(char-lower-case? #\\1")))

  (test-case "(digit-value <char>)" (lambda ()
    (assert-equal (digit-value #\3) 3 "(digit-value #\\3)")
    (assert-equal (digit-value #\x664) 4 "(digit-value #\\x664)")
    (assert-equal (digit-value #\xAE6) 0 "(digit-value #\\xAE6)")
    (assert-equal (digit-value #\xEA6) #f "(digit-value #\\xEA6)")
    (assert-equal (digit-value #\a) #f "(digit-value #\\a)")))

  (test-case "(char->integer <char>)" (lambda ()
    (assert-equal (char->integer #\a) #x61 "(char->integer #\\a)")
    (assert-equal (char->integer #\δ) #x3b4 "(char->integer #\\δ)")))

  (test-case "(integer->char <n>)" (lambda ()
    (assert-equal (integer->char #x61) #\a "(integer->char #x61)")
    (assert-equal (integer->char #x3b4) #\δ "(integer->char #x3b4)")))

  (test-case "(char-upcase <char>)" (lambda ()
    (assert-equal (char-upcase #\a) #\A "(char-upcase #\\a)")
    (assert-equal (char-upcase #\A) #\A "(char-upcase #\\A)")
    (assert-equal (char-upcase #\π) #\Π "(char-upcase #\\π)")
    (assert-equal (char-upcase #\Π) #\Π "(char-upcase #\\Π)")
    (assert-equal (char-upcase #\1) #\1 "(char-upcase #\\1)")))

  (test-case "(char-downcase <char>)" (lambda ()
    (assert-equal (char-downcase #\a) #\a "(char-downcase #\\a)")
    (assert-equal (char-downcase #\A) #\a "(char-downcase #\\A)")
    (assert-equal (char-downcase #\x3C0) #\π "(char-downcase #\\π)")
    (assert-equal (char-downcase #\x3A0) #\π "(char-downcase #\\Π)")
    (assert-equal (char-downcase #\1) #\1 "(char-downcase #\\1)")))

  (test-case "(char-foldcase <char>)" (lambda ()
    (assert-equal (char-foldcase #\a) #\a "(char-foldcase #\\a)")
    (assert-equal (char-foldcase #\A) #\a "(char-foldcase #\\A)")
    (assert-equal (char-foldcase #\π) #\π "(char-foldcase #\\π)")
    (assert-equal (char-foldcase #\Π) #\π "(char-foldcase #\\Π)")
    (assert-equal (char-foldcase #\1) #\1 "(char-foldcase #\\1)")))
)
