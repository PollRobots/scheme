#|
 |  Test trig operations.
 |#
(if (not (procedure? assert))
  (include "test/test.scm"))

(run-tests "trig"
  (test-case "sin²x + cos²x = 1" (lambda ()
    (letrec ((id (lambda (x)
                (let ((sx (sin x)) (cx (cos x)))
                  (+ (* sx sx) (* cx cx)))))
             (test (lambda (n)
                (cond
                  ((< n 6.3) ;; test up to 2π
                    (assert
                      (< (abs (- 1 (id n))) 1e-13)
                      " sin²x + cos²x of " n " = " (id n))
                    (test (+ n 0.05)))
                  (else #t)))))
      (test 0))))

  (test-case "tan x = sin x / cos x" (lambda ()
    (letrec ((id (lambda (x)
                  (let ((dx (- (tan x) (/ (sin x) (cos x)))))
                    (* dx dx))))
             (test (lambda (acc x n)
                (cond
                  ((< x 6.3) ;; test up to 2π
                   (assert
                      (< (id x) 1e-20)
                      "(tan x - sin x / cos x)² of " x " = " (id x))
                   (test (+ acc (id x)) (+ x 0.05) (+ n 1)))
                  (else (let ((rms (sqrt (/ acc n))))
                          (assert (< rms 1e-12) " rms error is " rms)))))))

      (test 0 0 0))))

  (test-case "tan x - test vectors over 0 ≤ x < π/4" (lambda ()
    (let ((test-vector #( (0.00	0.000000000000000)
                          (0.01	0.010000333346667)
                          (0.02	0.020002667093402)
                          (0.03	0.030009003241181)
                          (0.04	0.040021346995515)
                          (0.05	0.050041708375539)
                          (0.06	0.060072103831297)
                          (0.07	0.070114557872003)
                          (0.08	0.080171104708073)
                          (0.09	0.090243789909785)
                          (0.10	0.100334672085451)
                          (0.11	0.110445824582041)
                          (0.12	0.120579337211305)
                          (0.13	0.130737318004460)
                          (0.14	0.140921894998625)
                          (0.15	0.151135218058295)
                          (0.16	0.161379460735211)
                          (0.17	0.171656822170143)
                          (0.18	0.181969529040198)
                          (0.19	0.192319837555433)
                          (0.20	0.202710035508673)
                          (0.21	0.213142444382645)
                          (0.22	0.223619421518684)
                          (0.23	0.234143362351465)
                          (0.24	0.244716702714465)
                          (0.25	0.255341921221036)
                          (0.26	0.266021541726265)
                          (0.27	0.276758135875031)
                          (0.28	0.287554325741977)
                          (0.29	0.298412786569432)
                          (0.30	0.309336249609623)
                          (0.31	0.320327505077924)
                          (0.32	0.331389405224235)
                          (0.33	0.342524867530039)
                          (0.34	0.353736878039123)
                          (0.35	0.365028494830425)
                          (0.36	0.376402851642027)
                          (0.37	0.387863161655849)
                          (0.38	0.399412721453226)
                          (0.39	0.411054915152214)
                          (0.40	0.422793218738162)
                          (0.41	0.434631204599889)
                          (0.42	0.446572546284595)
                          (0.43	0.458621023485555)
                          (0.44	0.470780527277622)
                          (0.45	0.483055065616578)
                          (0.46	0.495448769119550)
                          (0.47	0.507965897144883)
                          (0.48	0.520610844191258)
                          (0.49	0.533388146637203)
                          (0.50	0.546302489843790)
                          (0.51	0.559358715644945)
                          (0.52	0.572561830251668)
                          (0.53	0.585917012598471)
                          (0.54	0.599429623162490)
                          (0.55	0.613105213288136)
                          (0.56	0.626949535052698)
                          (0.57	0.640968551711156)
                          (0.58	0.655168448761508)
                          (0.59	0.669555645675302)
                          (0.60	0.684136808341692)
                          (0.61	0.698918862277391)
                          (0.62	0.713909006659240)
                          (0.63	0.729114729240969)
                          (0.64	0.744543822220964)
                          (0.65	0.760204399133676)
                          (0.66	0.776104912843664)
                          (0.67	0.792254174728257)
                          (0.68	0.808661375142565)
                          (0.69	0.825336105269025)
                          (0.70	0.842288380463079)
                          (0.71	0.859528665216941)
                          (0.72	0.877067899874834)
                          (0.73	0.894917529245814)
                          (0.74	0.913089533274301)
                          (0.75	0.931596459944072)
                          (0.76	0.950451460608803)
                          (0.77	0.969668327961489)
                          (0.78	0.989261536876605))))
      (letrec ((fn (lambda (acc i)
                      (if (> i 78) ;; check for range 0 - π/4
                          (sqrt (/ acc i))
                          (let* ((v (vector-ref test-vector i))
                                 (d (- (tan (car v)) (cadr v))))
                            (fn (+ acc (* d d)) (+ i 1)))))))
          (let ((rms-error (fn 0 0)))
            (assert
              (< rms-error 1e-13)
              " expect rms error to be less than 1e-13, got " rms-error))))))

  (test-case "atan x - test vectors over 0 ≤ x ≤ 1" (lambda ()
    (let ((test-vector #( (0.00	0.00000000000000)
                          (0.01	0.00999966668666)
                          (0.02	0.01999733397315)
                          (0.03	0.02999100485687)
                          (0.04	0.03997868712329)
                          (0.05	0.04995839572194)
                          (0.06	0.05992815512120)
                          (0.07	0.06988600163464)
                          (0.08	0.07982998571223)
                          (0.09	0.08975817418995)
                          (0.10	0.09966865249116)
                          (0.11	0.10955952677394)
                          (0.12	0.11942892601833)
                          (0.13	0.12927500404814)
                          (0.14	0.13909594148207)
                          (0.15	0.14888994760949)
                          (0.16	0.15865526218640)
                          (0.17	0.16839015714753)
                          (0.18	0.17809293823119)
                          (0.19	0.18776194651359)
                          (0.20	0.19739555984988)
                          (0.21	0.20699219421982)
                          (0.22	0.21655030497608)
                          (0.23	0.22606838799388)
                          (0.24	0.23554498072086)
                          (0.25	0.24497866312686)
                          (0.26	0.25436805855326)
                          (0.27	0.26371183446226)
                          (0.28	0.27300870308671)
                          (0.29	0.28225742198149)
                          (0.30	0.29145679447786)
                          (0.31	0.30060567004239)
                          (0.32	0.30970294454245)
                          (0.33	0.31874756042064)
                          (0.34	0.32773850678055)
                          (0.35	0.33667481938672)
                          (0.36	0.34555558058171)
                          (0.37	0.35437991912343)
                          (0.38	0.36314700994617)
                          (0.39	0.37185607384858)
                          (0.40	0.38050637711236)
                          (0.41	0.38909723105527)
                          (0.42	0.39762799152212)
                          (0.43	0.40609805831761)
                          (0.44	0.41450687458478)
                          (0.45	0.42285392613294)
                          (0.46	0.43113874071878)
                          (0.47	0.43936088728459)
                          (0.48	0.44751997515717)
                          (0.49	0.45561565321122)
                          (0.50	0.46364760900080)
                          (0.51	0.47161556786232)
                          (0.52	0.47951929199259)
                          (0.53	0.48735857950519)
                          (0.54	0.49513326346840)
                          (0.55	0.50284321092786)
                          (0.56	0.51048832191677)
                          (0.57	0.51806852845672)
                          (0.58	0.52558379355161)
                          (0.59	0.53303411017749)
                          (0.60	0.54041950027058)
                          (0.61	0.54774001371590)
                          (0.62	0.55499572733858)
                          (0.63	0.56218674390002)
                          (0.64	0.56931319110066)
                          (0.65	0.57637522059118)
                          (0.66	0.58337300699385)
                          (0.67	0.59030674693537)
                          (0.68	0.59717665809267)
                          (0.69	0.60398297825299)
                          (0.70	0.61072596438920)
                          (0.71	0.61740589175157)
                          (0.72	0.62402305297675)
                          (0.73	0.63057775721493)
                          (0.74	0.63707032927568)
                          (0.75	0.64350110879328)
                          (0.76	0.64987044941194)
                          (0.77	0.65617871799139)
                          (0.78	0.66242629383315)
                          (0.79	0.66861356792782)
                          (0.80	0.67474094222355)
                          (0.81	0.68080882891582)
                          (0.82	0.68681764975864)
                          (0.83	0.69276783539712)
                          (0.84	0.69865982472146)
                          (0.85	0.70449406424221)
                          (0.86	0.71027100748668)
                          (0.87	0.71599111441630)
                          (0.88	0.72165485086476)
                          (0.89	0.72726268799669)
                          (0.90	0.73281510178650)
                          (0.91	0.73831257251722)
                          (0.92	0.74375558429886)
                          (0.93	0.74914462460601)
                          (0.94	0.75448018383440)
                          (0.95	0.75976275487577)
                          (0.96	0.76499283271091)
                          (0.97	0.77017091402033)
                          (0.98	0.77529749681212)
                          (0.99	0.78037308006663)
                          (1.00	0.78539816339744))))
      (letrec ((fn (lambda (acc i)
                      (if (> i 100)
                          (sqrt (/ acc i))
                          (let* ((v (vector-ref test-vector i))
                                 (d (- (atan (car v)) (cadr v))))
                            (fn (+ acc (* d d)) (+ i 1)))))))
          (let ((rms-error (fn 0 0)))
            (assert
              (< rms-error 1e-14)
              " expect rms error to be less than 1e-14, got " rms-error))))))
)
